package main

import (
	"fmt"
	"github.com/buaazp/fasthttprouter"
	"github.com/jackc/pgx"
	"github.com/pringleskate/TP_DB_homework/cmd/handlers"
	"github.com/pringleskate/TP_DB_homework/internal/services"
	"github.com/pringleskate/TP_DB_homework/internal/storages/forumStorage"
	_ "github.com/swaggo/echo-swagger/example/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/valyala/fasthttp"
	"log"
)

func main() {
	//TODO добавить методы для взаимодействия с БД (SERVICE)
	connectionString := "postgres://postgres:qwerty1221@localhost/forum?sslmode=disable"
	config, err := pgx.ParseURI(connectionString)
	if err != nil {
		fmt.Println(err)
		return
	}

	db, err := pgx.NewConnPool(
		pgx.ConnPoolConfig{
			ConnConfig:     config,
			MaxConnections: 10,
		})

	if err != nil {
		fmt.Println(err)
		return
	}


	//user := userStorage.NewStorage(db)
	forum := forumStorage.NewStorage(db)
	/*err = user.CreateUser(models.User{
		Nickname: "nick",
		Fullname: "kate",
		Email:    "pridius",
		About:    "",
	})*/

	service := services.NewService()

	handler := handlers.NewHandler(service)
	rout := router(handler)

	err = fasthttp.ListenAndServe(":9090", redirect(rout))
	if err != nil {
		log.Fatal(err)
	}
}

func redirect(router *fasthttprouter.Router) fasthttp.RequestHandler {
	return func(ctx *fasthttp.RequestCtx) {
		router.Handler(ctx)
	}
}

func router(handler handlers.Handler) *fasthttprouter.Router {
	r := fasthttprouter.New()
	r.POST("/forum/create", handler.ForumCreate)
	r.POST("/forum/:slug/create", handler.ThreadCreate)
	r.POST("/user/:nickname/create", handler.UserCreate)
	r.GET("/forum/:slug/details", handler.ForumGet)
	r.GET("/user/:nickname/profile", handler.UserGet)
	r.POST("/user/:nickname/profile", handler.UserUpdate)
	r.POST("/thread/:slug_or_id/vote", handler.ThreadVote)
	r.GET("/thread/:slug_or_id/details", handler.ThreadGet)
	r.POST("/thread/:slug_or_id/details", handler.ThreadUpdate)
	r.GET("//forum/:slug/threads", handler.ForumGetThreads)
	r.POST("/thread/:slug_or_id/create", handler.PostsCreate)
	r.POST("/service/clear", handler.Clear)
	r.GET("/service/status", handler.Status)
	r.POST("/post/:id/details", handler.PostUpdate)
	r.GET("/post/:id/details", handler.PostGet)
	r.GET("/thread/:slug_or_id/posts", handler.ThreadGetPosts)
	r.GET("/forum/:slug/users", handler.ForumGetUsers)
	return r
}


